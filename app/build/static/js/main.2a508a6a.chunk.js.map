{"version":3,"sources":["Components/Sensor.js","Components/NewSensor.js","App.js","serviceWorker.js","index.js"],"names":["Sensor","props","sensor","react_default","a","createElement","className","name","temp","humidity","NewSensor","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","e","preventDefault","addSensor","state","setState","handleChange","target","value","Fragment","onSubmit","onClick","type","onChange","placeholder","aria-describedby","Component","App","loading","data","undefined","id","length","Math","random","toFixed","floor","sensors","push","_this2","setData","setInterval","_this3","axios","get","then","res","console","log","catch","error","_this4","sensorList","map","index","key","Components_Sensor","role","Components_NewSensor","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2a508a6a.chunk.js","sourcesContent":["import React from 'react'; \r\n\r\nconst Sensor = (props) => {\r\n\r\n    const {sensor} = props; \r\n\r\n    return (\r\n        <div className=\"col-md-4 Top-margin\">\r\n        <div className=\"sensor-box\">\r\n            <p>Name: {sensor.name}</p>\r\n            <p>Temperature: {sensor.temp}</p>\r\n            <p>Humidity: {sensor.humidity}</p>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sensor","import React, {Component} from 'react'\r\n\r\nclass NewSensor extends Component {\r\n   \r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            name: ''\r\n        }\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault(); \r\n        \r\n        this.props.addSensor(this.state.name)\r\n        this.setState({\r\n            name: ''\r\n        })\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            name: e.target.value\r\n        })\r\n    }\r\n   \r\n    render() {\r\n\r\n        return (\r\n        <React.Fragment>        \r\n        <form onSubmit={this.handleSubmit}>\r\n        <div className=\"Top-margin\">\r\n        <div className=\"input-group mb-2\">\r\n        <div className=\"input-group-prepend\">\r\n            <button className=\"btn btn-outline-secondary\" onClick={this.handleSubmit} type=\"button\">Add new sensor</button>\r\n        </div>\r\n        <input type=\"text\" className=\"form-control\" onChange={this.handleChange} placeholder=\"Name\" value={this.state.name} aria-describedby=\"basic-addon1\" />\r\n        </div>\r\n        </div>\r\n        </form>\r\n        </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NewSensor","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport axios from 'axios'\r\nimport Sensor from './Components/Sensor'\r\nimport NewSensor from './Components/NewSensor'\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    loading: true, \r\n    data: []\r\n  }\r\n\r\n  componentDidMount() {\r\n \r\n    this.setData(); \r\n    \r\n    setInterval(() => {\r\n\r\n      this.setData(); \r\n\r\n    }, 2000)\r\n  }\r\n\r\n  setData() {\r\n    axios.get(\"https://limitless-mesa-30279.herokuapp.com/current\").then(res => {\r\n      console.log(res.data.data);\r\n      this.setState({\r\n        loading: false,\r\n        data: res.data\r\n      })\r\n    }).catch(error => {\r\n      this.setState({\r\n        loading: false\r\n      })\r\n    })\r\n  }\r\n\r\n  addSensor = (name) => {\r\n\r\n    if (name === \"\" || name === undefined) {\r\n      return; \r\n    }\r\n\r\n    const id = this.state.data ? this.state.data[this.state.data.length-1].id +1 : 1;\r\n    let temp = ((Math.random() * 30.0) - 10).toFixed(2);  \r\n    let humidity = Math.floor(Math.random()*100); \r\n\r\n    let sensor = {\r\n      name: name,\r\n      id: id, \r\n      temp: temp, \r\n      humidity: humidity\r\n    }\r\n\r\n    let sensors = this.state.data; \r\n    sensors.push(sensor); \r\n\r\n    this.setState({\r\n      data: sensors\r\n    })\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    console.log(\"KAKE:\" + this.state.data); \r\n    const sensors = this.state.data; \r\n    const sensorList = sensors.length ? (\r\n        <div className=\"row\">\r\n        {sensors.map((sensor, index) => {\r\n            return (\r\n              <React.Fragment key={index}>\r\n                  <Sensor sensor={sensor} loading={this.state.loading} key={index} />\r\n                  {(index+1) % 3 === 0 && index > 0 && !this.state.loading && <div className=\"w-100\"></div>}\r\n              </React.Fragment>\r\n            )\r\n        })}\r\n      </div>\r\n    ) : (!this.state.loading && <p>Ingen data..</p>)\r\n\r\n    \r\n    return (\r\n\r\n      <div className=\"App\">\r\n        <div className=\"container\">\r\n          {this.state.loading ? (\r\n          <div className=\"text-center\">\r\n          <div className=\"spinner-border Top-margin\" role=\"status\">\r\n          </div>\r\n        </div>)\r\n        : (<p>{sensorList}</p>)}\r\n            <NewSensor addSensor={this.addSensor} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}